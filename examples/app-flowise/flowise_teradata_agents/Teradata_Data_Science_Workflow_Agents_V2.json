{
  "nodes": [
    {
      "id": "startAgentflow_0",
      "type": "agentFlow",
      "position": {
        "x": -381.31634434950655,
        "y": 415.1034273614637
      },
      "data": {
        "id": "startAgentflow_0",
        "label": "Start",
        "version": 1.1,
        "name": "startAgentflow",
        "type": "Start",
        "color": "#7EE787",
        "hideInput": true,
        "baseClasses": [
          "Start"
        ],
        "category": "Agent Flows",
        "description": "Starting point of the agentflow",
        "inputParams": [
          {
            "label": "Input Type",
            "name": "startInputType",
            "type": "options",
            "options": [
              {
                "label": "Chat Input",
                "name": "chatInput",
                "description": "Start the conversation with chat input"
              },
              {
                "label": "Form Input",
                "name": "formInput",
                "description": "Start the workflow with form inputs"
              }
            ],
            "default": "chatInput",
            "id": "startAgentflow_0-input-startInputType-options",
            "display": true
          },
          {
            "label": "Form Title",
            "name": "formTitle",
            "type": "string",
            "placeholder": "Please Fill Out The Form",
            "show": {
              "startInputType": "formInput"
            },
            "id": "startAgentflow_0-input-formTitle-string",
            "display": false
          },
          {
            "label": "Form Description",
            "name": "formDescription",
            "type": "string",
            "placeholder": "Complete all fields below to continue",
            "show": {
              "startInputType": "formInput"
            },
            "id": "startAgentflow_0-input-formDescription-string",
            "display": false
          },
          {
            "label": "Form Input Types",
            "name": "formInputTypes",
            "description": "Specify the type of form input",
            "type": "array",
            "show": {
              "startInputType": "formInput"
            },
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Options",
                    "name": "options"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Label",
                "name": "label",
                "type": "string",
                "placeholder": "Label for the input"
              },
              {
                "label": "Variable Name",
                "name": "name",
                "type": "string",
                "placeholder": "Variable name for the input (must be camel case)",
                "description": "Variable name must be camel case. For example: firstName, lastName, etc."
              },
              {
                "label": "Add Options",
                "name": "addOptions",
                "type": "array",
                "show": {
                  "formInputTypes[$index].type": "options"
                },
                "array": [
                  {
                    "label": "Option",
                    "name": "option",
                    "type": "string"
                  }
                ]
              }
            ],
            "id": "startAgentflow_0-input-formInputTypes-array",
            "display": false
          },
          {
            "label": "Ephemeral Memory",
            "name": "startEphemeralMemory",
            "type": "boolean",
            "description": "Start fresh for every execution without past chat history",
            "optional": true
          },
          {
            "label": "Flow State",
            "name": "startState",
            "description": "Runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "placeholder": "Foo"
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "placeholder": "Bar"
              }
            ],
            "id": "startAgentflow_0-input-startState-array",
            "display": true
          },
          {
            "label": "Persist State",
            "name": "startPersistState",
            "type": "boolean",
            "description": "Persist the state in the same session",
            "optional": true,
            "id": "startAgentflow_0-input-startPersistState-boolean",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "startInputType": "chatInput",
          "formTitle": "",
          "formDescription": "",
          "formInputTypes": "",
          "startState": [
            {
              "key": "next",
              "value": "None"
            },
            {
              "key": "instruction",
              "value": "None"
            },
            {
              "key": "answers",
              "value": " "
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "startAgentflow_0-output-startAgentflow",
            "label": "Start",
            "name": "startAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 103,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": -381.31634434950655,
        "y": 415.1034273614637
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_0",
      "position": {
        "x": -13.482253879966805,
        "y": 313.4517182061321
      },
      "data": {
        "id": "conditionAgentflow_0",
        "label": "Check next worker",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
                "operation": "equal",
                "value2": "<p>SOFTWARE</p>"
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_0-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
              "operation": "equal",
              "value2": "<p> MetaData_Extractor</p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
              "operation": "equal",
              "value2": "<p>Data_Cleaning</p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
              "operation": "equal",
              "value2": "<p>Data_Exploration</p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
              "operation": "equal",
              "value2": "<p>Data_Preparation</p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
              "operation": "equal",
              "value2": "<p>Model_Training</p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
              "operation": "equal",
              "value2": "<p>Model_Inference</p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
              "operation": "equal",
              "value2": "<p>Model_Evaluation</p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
              "operation": "equal",
              "value2": "<p>Text_Analytics</p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
              "operation": "equal",
              "value2": "<p>Association_Analysis</p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.next\" data-label=\"$flow.state.next\">{{ $flow.state.next }}</span> </p>",
              "operation": "equal",
              "value2": "<p>General</p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_0-output-0",
            "label": 0,
            "name": 0,
            "description": "Condition 0"
          },
          {
            "id": "conditionAgentflow_0-output-1",
            "label": 1,
            "name": 1,
            "description": "Condition 1"
          },
          {
            "id": "conditionAgentflow_0-output-2",
            "label": 2,
            "name": 2,
            "description": "Condition 2"
          },
          {
            "id": "conditionAgentflow_0-output-3",
            "label": 3,
            "name": 3,
            "description": "Condition 3"
          },
          {
            "id": "conditionAgentflow_0-output-4",
            "label": 4,
            "name": 4,
            "description": "Condition 4"
          },
          {
            "id": "conditionAgentflow_0-output-5",
            "label": 5,
            "name": 5,
            "description": "Condition 5"
          },
          {
            "id": "conditionAgentflow_0-output-6",
            "label": 6,
            "name": 6,
            "description": "Condition 6"
          },
          {
            "id": "conditionAgentflow_0-output-7",
            "label": 7,
            "name": 7,
            "description": "Condition 7"
          },
          {
            "id": "conditionAgentflow_0-output-8",
            "label": 8,
            "name": 8,
            "description": "Condition 8"
          },
          {
            "id": "conditionAgentflow_0-output-9",
            "label": 9,
            "name": 9,
            "description": "Condition 9"
          },
          {
            "id": "conditionAgentflow_0-output-10",
            "label": 10,
            "name": 10,
            "description": "Else"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 194,
      "height": 260,
      "selected": false,
      "positionAbsolute": {
        "x": -13.482253879966805,
        "y": 313.4517182061321
      },
      "dragging": false
    },
    {
      "id": "agentAgentflow_1",
      "position": {
        "x": 628.5977440272089,
        "y": -183.86413884340638
      },
      "data": {
        "id": "agentAgentflow_1",
        "label": "Data Cleaning Agent",
        "version": 2.2,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_1-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_1-input-agentMessages-array",
            "display": true
          },
          {
            "label": "OpenAI Built-in Tools",
            "name": "agentToolsBuiltInOpenAI",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_preview",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Code Interpreter",
                "name": "code_interpreter",
                "description": "Write and run Python code in a sandboxed environment"
              },
              {
                "label": "Image Generation",
                "name": "image_generation",
                "description": "Generate images based on a text prompt"
              }
            ],
            "show": {
              "agentModel": "chatOpenAI"
            },
            "id": "agentAgentflow_1-input-agentToolsBuiltInOpenAI-multiOptions",
            "display": false
          },
          {
            "label": "Gemini Built-in Tools",
            "name": "agentToolsBuiltInGemini",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "URL Context",
                "name": "urlContext",
                "description": "Extract content from given URLs"
              },
              {
                "label": "Google Search",
                "name": "googleSearch",
                "description": "Search real-time web content"
              }
            ],
            "show": {
              "agentModel": "chatGoogleGenerativeAI"
            },
            "id": "agentAgentflow_1-input-agentToolsBuiltInGemini-multiOptions",
            "display": false
          },
          {
            "label": "Anthropic Built-in Tools",
            "name": "agentToolsBuiltInAnthropic",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_20250305",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Web Fetch",
                "name": "web_fetch_20250910",
                "description": "Retrieve full content from specified web pages"
              }
            ],
            "show": {
              "agentModel": "chatAnthropic"
            },
            "id": "agentAgentflow_1-input-agentToolsBuiltInAnthropic-multiOptions",
            "display": false
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_1-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_1-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_1-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_1-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_1-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_1-input-agentMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_1-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_1-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_1-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_1-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "awsChatBedrock",
          "agentMessages": [
            {
              "role": "system",
              "content": "<blockquote><p><em>You are a Data Cleaning Worker Agent responsible for preparing datasets for analysis by identifying and correcting data quality issues. Your tasks include handling outliers, managing missing values, and preprocessing columns using the provided MCP functions. </em>Use supervisor instruction <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> to perform task.</p><p>Your responsibilities include:</p><h4><strong>🟠 Handling Outliers</strong></h4><ul><li><p>Use <strong>GetFutileColumns</strong> to detect columns with irrelevant or low-quality data.</p></li><li><p>Apply <strong>OutlierFilterFit</strong> to fit an outlier detection model on numerical columns.</p></li><li><p>Use <strong>OutlierFilterTransform</strong> to clean or remove outliers based on the fitted model.</p></li></ul><h4><strong>🔵 Handling Missing Values</strong></h4><ul><li><p>Use <strong>GetRowsWithMissingValues</strong> to identify rows with missing or null values.</p></li></ul><ul><li><p>Use <strong>GetRowsWithoutMissingValues</strong> to identify complete rows.</p></li><li><p>Apply <strong>SimpleImputeFit</strong> to train an imputation model for missing values.</p></li><li><p>Use <strong>SimpleImputeTransform</strong> to fill missing values using the fitted model.</p></li></ul><h4><strong>🟢 Manipulating / Preprocessing Data</strong></h4><ul><li><p>Use <strong>Pack</strong> to merge multiple columns into a single column.</p></li><li><p>Use <strong>Unpack</strong> to split a column into multiple components.</p></li><li><p>Apply <strong>StringSimilarity</strong> to compare and align text values across columns.</p></li><li><p>Use <strong>ConvertTo</strong> to standardize data types and formats across the dataset.</p></li></ul><p>You should:</p><ul><li><p>Select the appropriate <strong>MCP function(s)</strong> based on the nature of the data issue.</p></li><li><p>Ensure that transformations preserve data integrity and improve usability.</p></li><li><p>Document changes clearly for downstream agents or analysts.</p></li><li><p><strong>Note : Whenever fit and transform functions are called always save tool output in table</strong></p></li></ul></blockquote><blockquote><p>Be precise, efficient, and consistent in your cleaning operations to ensure high-quality data for modeling and analysis.</p></blockquote>"
            }
          ],
          "agentToolsBuiltInOpenAI": "",
          "agentToolsBuiltInGemini": "",
          "agentToolsBuiltInAnthropic": "",
          "agentTools": [
            {
              "agentSelectedTool": "customMCP",
              "agentSelectedToolRequiresHumanInput": false,
              "agentSelectedToolConfig": {
                "mcpServerConfig": "{\n  \"url\": \"http://teradata-mcp-server:8001/mcp\"\n}",
                "mcpActions": "[\"tdml_ConvertTo\",\"tdml_GetFutileColumns\",\"tdml_GetRowsWithMissingValues\",\"tdml_GetRowsWithoutMissingValues\",\"tdml_OutlierFilterFit\",\"tdml_OutlierFilterTransform\",\"tdml_Pack\",\"tdml_SimpleImputeFit\",\"tdml_SimpleImputeTransform\",\"tdml_StringSimilarity\",\"tdml_Unpack\",\"base_tableDDL\"]",
                "agentSelectedTool": "customMCP"
              }
            }
          ],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentMemoryWindowSize": "20",
          "agentMemoryMaxTokenLimit": "2000",
          "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> </p>",
          "agentReturnResponseAs": "assistantMessage",
          "agentUpdateState": "",
          "agentModelConfig": {
            "credential": "",
            "region": "us-east-1",
            "model": "anthropic.claude-3-haiku-20240307-v1:0",
            "customModel": "",
            "streaming": true,
            "temperature": 0.7,
            "max_tokens_to_sample": "2000",
            "allowImageUploads": "",
            "latencyOptimized": "",
            "agentModel": "awsChatBedrock"
          }
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_1-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 332,
      "height": 100,
      "selected": false,
      "positionAbsolute": {
        "x": 628.5977440272089,
        "y": -183.86413884340638
      },
      "dragging": false
    },
    {
      "id": "agentAgentflow_2",
      "position": {
        "x": 581.3832108246423,
        "y": -68.7606667093819
      },
      "data": {
        "id": "agentAgentflow_2",
        "label": "Data Exploration Agent",
        "version": 2.2,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_2-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_2-input-agentMessages-array",
            "display": true
          },
          {
            "label": "OpenAI Built-in Tools",
            "name": "agentToolsBuiltInOpenAI",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_preview",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Code Interpreter",
                "name": "code_interpreter",
                "description": "Write and run Python code in a sandboxed environment"
              },
              {
                "label": "Image Generation",
                "name": "image_generation",
                "description": "Generate images based on a text prompt"
              }
            ],
            "show": {
              "agentModel": "chatOpenAI"
            },
            "id": "agentAgentflow_2-input-agentToolsBuiltInOpenAI-multiOptions",
            "display": false
          },
          {
            "label": "Gemini Built-in Tools",
            "name": "agentToolsBuiltInGemini",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "URL Context",
                "name": "urlContext",
                "description": "Extract content from given URLs"
              },
              {
                "label": "Google Search",
                "name": "googleSearch",
                "description": "Search real-time web content"
              }
            ],
            "show": {
              "agentModel": "chatGoogleGenerativeAI"
            },
            "id": "agentAgentflow_2-input-agentToolsBuiltInGemini-multiOptions",
            "display": false
          },
          {
            "label": "Anthropic Built-in Tools",
            "name": "agentToolsBuiltInAnthropic",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_20250305",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Web Fetch",
                "name": "web_fetch_20250910",
                "description": "Retrieve full content from specified web pages"
              }
            ],
            "show": {
              "agentModel": "chatAnthropic"
            },
            "id": "agentAgentflow_2-input-agentToolsBuiltInAnthropic-multiOptions",
            "display": false
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_2-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_2-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_2-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_2-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_2-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_2-input-agentMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_2-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_2-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_2-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_2-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "awsChatBedrock",
          "agentMessages": [
            {
              "role": "system",
              "content": "<blockquote><p><em>You are a Data Exploration Worker Agent tasked with exploration of datasets using the provided MCP tools.</em></p><p>You have access to the following functions:</p><ul><li><p><strong>MovingAverage</strong>: Compute moving averages for numerical columns.</p></li><li><p><strong>CategoricalSummary</strong>: Summarize categorical columns (e.g., frequency, mode).</p></li><li><p><strong>ColumnSummary</strong>: Provide an overview of all columns including types, counts, and basic stats.</p></li><li><p><strong>Histogram</strong>: Generate histograms to visualize data distributions.</p></li><li><p><strong>Teradata_Analytics_TD_UnivariateStatistics</strong>: Perform descriptive statistics on numerical columns.</p></li><li><p><strong>WhichMax / WhichMin</strong>: Find rows with maximum or minimum values for a specified column.</p></li></ul></blockquote><p></p><p></p>"
            }
          ],
          "agentToolsBuiltInOpenAI": "",
          "agentToolsBuiltInGemini": "",
          "agentToolsBuiltInAnthropic": "",
          "agentTools": [
            {
              "agentSelectedTool": "customMCP",
              "agentSelectedToolRequiresHumanInput": false,
              "agentSelectedToolConfig": {
                "mcpServerConfig": "{\n  \"url\": \"http://teradata-mcp-server:8001/mcp\"\n}",
                "mcpActions": "[\"tdml_CategoricalSummary\",\"tdml_ColumnSummary\",\"tdml_Histogram\",\"tdml_MovingAverage\",\"tdml_WhichMax\",\"tdml_WhichMin\",\"base_tableDDL\"]",
                "agentSelectedTool": "customMCP"
              }
            }
          ],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentMemoryWindowSize": "20",
          "agentMemoryMaxTokenLimit": "2000",
          "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> </p>",
          "agentReturnResponseAs": "assistantMessage",
          "agentUpdateState": "",
          "agentModelConfig": {
            "credential": "",
            "region": "us-east-1",
            "model": "anthropic.claude-3-haiku-20240307-v1:0",
            "customModel": "",
            "streaming": true,
            "temperature": 0.7,
            "max_tokens_to_sample": "4000",
            "allowImageUploads": "",
            "latencyOptimized": "",
            "agentModel": "awsChatBedrock"
          }
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_2-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 332,
      "height": 100,
      "selected": false,
      "positionAbsolute": {
        "x": 581.3832108246423,
        "y": -68.7606667093819
      },
      "dragging": false
    },
    {
      "id": "agentAgentflow_3",
      "position": {
        "x": 515.2354654611594,
        "y": 896.0368661165589
      },
      "data": {
        "id": "agentAgentflow_3",
        "label": "Generate Final Answer",
        "version": 2.2,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_3-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_3-input-agentMessages-array",
            "display": true
          },
          {
            "label": "OpenAI Built-in Tools",
            "name": "agentToolsBuiltInOpenAI",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_preview",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Code Interpreter",
                "name": "code_interpreter",
                "description": "Write and run Python code in a sandboxed environment"
              },
              {
                "label": "Image Generation",
                "name": "image_generation",
                "description": "Generate images based on a text prompt"
              }
            ],
            "show": {
              "agentModel": "chatOpenAI"
            },
            "id": "agentAgentflow_3-input-agentToolsBuiltInOpenAI-multiOptions",
            "display": false
          },
          {
            "label": "Gemini Built-in Tools",
            "name": "agentToolsBuiltInGemini",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "URL Context",
                "name": "urlContext",
                "description": "Extract content from given URLs"
              },
              {
                "label": "Google Search",
                "name": "googleSearch",
                "description": "Search real-time web content"
              }
            ],
            "show": {
              "agentModel": "chatGoogleGenerativeAI"
            },
            "id": "agentAgentflow_3-input-agentToolsBuiltInGemini-multiOptions",
            "display": false
          },
          {
            "label": "Anthropic Built-in Tools",
            "name": "agentToolsBuiltInAnthropic",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_20250305",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Web Fetch",
                "name": "web_fetch_20250910",
                "description": "Retrieve full content from specified web pages"
              }
            ],
            "show": {
              "agentModel": "chatAnthropic"
            },
            "id": "agentAgentflow_3-input-agentToolsBuiltInAnthropic-multiOptions",
            "display": false
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_3-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_3-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_3-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_3-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_3-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_3-input-agentMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_3-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_3-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_3-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_3-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "azureChatOpenAI",
          "agentMessages": [],
          "agentToolsBuiltInOpenAI": "",
          "agentToolsBuiltInGemini": "",
          "agentToolsBuiltInAnthropic": "",
          "agentTools": [],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentMemoryWindowSize": "5",
          "agentMemoryMaxTokenLimit": "2000",
          "agentUserMessage": "<p>generate output for user question : <span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> using answers : <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.answers\" data-label=\"$flow.state.answers\">{{ $flow.state.answers }}</span></p>",
          "agentReturnResponseAs": "userMessage",
          "agentUpdateState": "",
          "agentModelConfig": {
            "credential": "",
            "modelName": "gpt-4.1-mini",
            "temperature": 0.9,
            "maxTokens": "",
            "streaming": true,
            "topP": "",
            "frequencyPenalty": "",
            "presencePenalty": "",
            "timeout": "",
            "basepath": "",
            "baseOptions": "",
            "allowImageUploads": "",
            "imageResolution": "low",
            "reasoning": "",
            "agentModel": "azureChatOpenAI"
          }
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_3-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 219,
      "height": 72,
      "selected": false,
      "positionAbsolute": {
        "x": 515.2354654611594,
        "y": 896.0368661165589
      },
      "dragging": false
    },
    {
      "id": "llmAgentflow_0",
      "position": {
        "x": -211.54573437337677,
        "y": 414.78479771131543
      },
      "data": {
        "id": "llmAgentflow_0",
        "label": "Supervisor",
        "version": 1,
        "name": "llmAgentflow",
        "type": "LLM",
        "color": "#64B5F6",
        "baseClasses": [
          "LLM"
        ],
        "category": "Agent Flows",
        "description": "Large language models to analyze user-provided inputs and generate responses",
        "inputParams": [
          {
            "label": "Model",
            "name": "llmModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "llmAgentflow_0-input-llmModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "llmMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "llmAgentflow_0-input-llmMessages-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "llmEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "llmAgentflow_0-input-llmEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "llmMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_0-input-llmMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "llmMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "llmMemoryType": "windowSize"
            },
            "id": "llmAgentflow_0-input-llmMemoryWindowSize-number",
            "display": true
          },
          {
            "label": "Max Token Limit",
            "name": "llmMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "llmMemoryType": "conversationSummaryBuffer"
            },
            "id": "llmAgentflow_0-input-llmMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "llmUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_0-input-llmUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "llmReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "llmAgentflow_0-input-llmReturnResponseAs-options",
            "display": true
          },
          {
            "label": "JSON Structured Output",
            "name": "llmStructuredOutput",
            "description": "Instruct the LLM to give output in a JSON structured schema",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string"
              },
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "String Array",
                    "name": "stringArray"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Enum",
                    "name": "enum"
                  },
                  {
                    "label": "JSON Array",
                    "name": "jsonArray"
                  }
                ]
              },
              {
                "label": "Enum Values",
                "name": "enumValues",
                "type": "string",
                "placeholder": "value1, value2, value3",
                "description": "Enum values. Separated by comma",
                "optional": true,
                "show": {
                  "llmStructuredOutput[$index].type": "enum"
                }
              },
              {
                "label": "JSON Schema",
                "name": "jsonSchema",
                "type": "code",
                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                "description": "JSON schema for the structured output",
                "optional": true,
                "show": {
                  "llmStructuredOutput[$index].type": "jsonArray"
                }
              },
              {
                "label": "Description",
                "name": "description",
                "type": "string",
                "placeholder": "Description of the key"
              }
            ],
            "id": "llmAgentflow_0-input-llmStructuredOutput-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "llmUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "llmAgentflow_0-input-llmUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "llmModel": "azureChatOpenAI",
          "llmMessages": [
            {
              "role": "system",
              "content": "<blockquote><p><em>You are a Data Science Supervisor Agent responsible for coordinating and overseeing a team of specialized agents in a data science pipeline. Your team includes agents for Data Cleaning, Data Exploration, Data Preparation, Model Training, Model Inference, Model Evaluation, Text Analytics, Path Analysis, and Association Analysis.</em></p></blockquote><h3><strong>🛠️ Available Worker Agents:</strong></h3><ol><li><p><strong>MetaData_Extractor</strong> – Extracts relevant tables, and columns. <em>Use first if metadata is missing.</em></p></li><li><p><strong>Data_Cleaning</strong> – Handles outliers, missing values, and preprocessing. e.g. outlier detection etc</p></li><li><p><strong>Data_Exploration</strong> – Provides insights into dataset columns.</p></li><li><p><strong>Data_Preparation</strong> – Transforms and prepares data for modeling or analysis. For e.g target encoding fit and transform</p></li><li><p><strong>Model_Training</strong> – Fit machine learning models. Like kmeans , xgboost etc</p></li><li><p><strong>Model_Inference</strong> – Makes predictions using trained models.</p></li><li><p><strong>Model_Evaluation</strong> – Assesses model performance.</p></li><li><p><strong>Text_Analytics</strong> – Extracts insights from textual data.</p></li><li><p><strong>Path_Analysis</strong> – Performs path analysis on datasets.</p></li><li><p><strong>Association_Analysis</strong> – Conducts association analysis (e.g., Apriori, CFilter) for transactional insights.</p><p></p></li></ol><h3><strong>🧠 Planning Steps for Task Execution:</strong></h3><ol><li><p><strong>Understand the User Query</strong></p><ul><li><p>Determine if the query is <strong>generic</strong> (e.g., greetings, general questions) → respond with <code>\"General\"</code>.</p></li><li><p>Otherwise, proceed to check <strong>Metadata Availability</strong>.</p></li></ul></li><li><p><strong>Check for Metadata Availability</strong></p><ul><li><p>If <strong>column information is not known</strong>, invoke <code>MetaData_Extractor</code> first.</p></li><li><p>Prompt the user for the <strong>database name</strong> if not provided.</p></li></ul></li><li><p><strong>Define the Workflow Path</strong></p><ul><li><p>Based on the query, identify which of the following task categories apply:</p><ul><li><p>Data Cleaning</p></li><li><p>Data Exploration</p></li><li><p>Data Preparation</p></li><li><p>Model Training</p></li><li><p>Model Inference</p></li><li><p>Model Evaluation</p></li><li><p>Text Analytics</p></li><li><p>Path Analysis</p></li><li><p>Association Analysis</p></li></ul></li></ul></li><li><p><strong>Select the Appropriate Worker</strong></p><ul><li><p>Choose the most relevant worker to begin the task.</p></li><li><p>Ensure the selection minimizes the number of steps required to complete the workflow.</p></li></ul></li><li><p><strong>Monitor Worker Responses</strong></p><ul><li><p>Analyze result of worker.</p></li><li><p>If a worker encounters an error or lacks required input, <strong>handle gracefully</strong> and prompt the user for missing information. And return \"FINISH\"</p></li></ul></li><li><p><strong>Iterate and Delegate</strong></p><ul><li><p>Based on the output of each worker, determine the next logical step.</p></li><li><p>Continue delegating tasks until the workflow is complete.</p></li></ul></li><li><p><strong>Complete the Workflow</strong></p><ul><li><p>Once all necessary tasks are completed, respond with <code>\"FINISH\" and send the complete answer for user query : </code><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> .</p></li></ul><p>NOTE : Restrict yourself to user question. Do not perform any additional step.</p></li></ol>"
            }
          ],
          "llmEnableMemory": true,
          "llmMemoryType": "windowSize",
          "llmUserMessage": "<p>Given the conversation above, who should act next? Or should we FINISH? Select one of: Data_Cleaning , Data_Exploration , MetaData_Extractor, Data_Preparation, Model_Training, Model_Inference, Model_Evaluation, Text_Analytics, Path_Analysis, Association_Analysis, General, FINISH</p>",
          "llmReturnResponseAs": "userMessage",
          "llmStructuredOutput": [
            {
              "key": "next",
              "type": "enum",
              "enumValues": "FINISH, Data_Cleaning , Data_Exploration , MetaData_Extractor, Data_Preparation, Model_Training, Model_Inference, Model_Evaluation, Text_Analytics, Path_Analysis, Association_Analysis, General",
              "jsonSchema": "",
              "description": "next worker to act"
            },
            {
              "key": "instructions",
              "type": "string",
              "enumValues": "",
              "jsonSchema": "",
              "description": "The specific instructions of the sub-task the next worker should accomplish."
            },
            {
              "key": "reasoning",
              "type": "string",
              "enumValues": "",
              "jsonSchema": "",
              "description": "The reason why next worker is tasked to do the job"
            }
          ],
          "llmUpdateState": [
            {
              "key": "next",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output.next\" data-label=\"output.next\">{{ output.next }}</span> </p>"
            },
            {
              "key": "instruction",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output.instructions\" data-label=\"output.instructions\">{{ output.instructions }}</span> </p>"
            }
          ],
          "llmModelConfig": {
            "credential": "",
            "modelName": "gpt-4.1-mini",
            "temperature": "0.7",
            "maxTokens": "",
            "streaming": true,
            "topP": "",
            "frequencyPenalty": "",
            "presencePenalty": "",
            "timeout": "",
            "basepath": "",
            "baseOptions": "",
            "allowImageUploads": "",
            "imageResolution": "low",
            "reasoning": "",
            "llmModel": "azureChatOpenAI"
          },
          "llmMemoryWindowSize": "50"
        },
        "outputAnchors": [
          {
            "id": "llmAgentflow_0-output-llmAgentflow",
            "label": "LLM",
            "name": "llmAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 175,
      "height": 72,
      "selected": false,
      "positionAbsolute": {
        "x": -211.54573437337677,
        "y": 414.78479771131543
      },
      "dragging": false
    },
    {
      "id": "agentAgentflow_0",
      "position": {
        "x": 659.3207729606347,
        "y": -296.11076864656417
      },
      "data": {
        "id": "agentAgentflow_0",
        "label": "MetaData_Extractor",
        "version": 2.2,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_0-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_0-input-agentMessages-array",
            "display": true
          },
          {
            "label": "OpenAI Built-in Tools",
            "name": "agentToolsBuiltInOpenAI",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_preview",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Code Interpreter",
                "name": "code_interpreter",
                "description": "Write and run Python code in a sandboxed environment"
              },
              {
                "label": "Image Generation",
                "name": "image_generation",
                "description": "Generate images based on a text prompt"
              }
            ],
            "show": {
              "agentModel": "chatOpenAI"
            },
            "id": "agentAgentflow_0-input-agentToolsBuiltInOpenAI-multiOptions",
            "display": false
          },
          {
            "label": "Gemini Built-in Tools",
            "name": "agentToolsBuiltInGemini",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "URL Context",
                "name": "urlContext",
                "description": "Extract content from given URLs"
              },
              {
                "label": "Google Search",
                "name": "googleSearch",
                "description": "Search real-time web content"
              }
            ],
            "show": {
              "agentModel": "chatGoogleGenerativeAI"
            },
            "id": "agentAgentflow_0-input-agentToolsBuiltInGemini-multiOptions",
            "display": false
          },
          {
            "label": "Anthropic Built-in Tools",
            "name": "agentToolsBuiltInAnthropic",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_20250305",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Web Fetch",
                "name": "web_fetch_20250910",
                "description": "Retrieve full content from specified web pages"
              }
            ],
            "show": {
              "agentModel": "chatAnthropic"
            },
            "id": "agentAgentflow_0-input-agentToolsBuiltInAnthropic-multiOptions",
            "display": false
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_0-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_0-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_0-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_0-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_0-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_0-input-agentMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_0-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_0-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_0-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_0-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "awsChatBedrock",
          "agentMessages": [
            {
              "role": "system",
              "content": "<p><em>You are a Metadata Extractor Worker Agent responsible for retrieving column-level metadata from specified databases and tables using MCP tools.</em></p><ul><li><p><em>Your primary task is to extract and return structured metadata including column names, data types, constraints, and any available descriptions or tags.</em></p></li><li><p><em>Use base table list  to list down relevant tables</em></p></li><li><p><em>Use base table ddl tool  to find structure of  particular table</em></p></li><li><p> Use supervisor instruction to <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> to perform task.</p></li></ul><p></p>"
            }
          ],
          "agentToolsBuiltInOpenAI": "",
          "agentToolsBuiltInGemini": "",
          "agentToolsBuiltInAnthropic": "",
          "agentTools": [
            {
              "agentSelectedTool": "customMCP",
              "agentSelectedToolRequiresHumanInput": false,
              "agentSelectedToolConfig": {
                "mcpServerConfig": "{\n  \"url\": \"http://teradata-mcp-server:8001/mcp\"\n}",
                "mcpActions": "[\"base_tableDDL\",\"base_tableList\"]",
                "agentSelectedTool": "customMCP"
              }
            }
          ],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentMemoryWindowSize": "20",
          "agentMemoryMaxTokenLimit": "2000",
          "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span></p>",
          "agentReturnResponseAs": "assistantMessage",
          "agentUpdateState": "",
          "agentModelConfig": {
            "credential": "",
            "region": "us-east-1",
            "model": "anthropic.claude-3-haiku-20240307-v1:0",
            "customModel": "",
            "streaming": true,
            "temperature": 0.7,
            "max_tokens_to_sample": "2000",
            "allowImageUploads": "",
            "latencyOptimized": "",
            "agentModel": "awsChatBedrock"
          }
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_0-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 332,
      "height": 100,
      "selected": false,
      "positionAbsolute": {
        "x": 659.3207729606347,
        "y": -296.11076864656417
      },
      "dragging": false
    },
    {
      "id": "llmAgentflow_1",
      "position": {
        "x": 527.2688287061134,
        "y": 795.073648768414
      },
      "data": {
        "id": "llmAgentflow_1",
        "label": "General Queries",
        "version": 1,
        "name": "llmAgentflow",
        "type": "LLM",
        "color": "#64B5F6",
        "baseClasses": [
          "LLM"
        ],
        "category": "Agent Flows",
        "description": "Large language models to analyze user-provided inputs and generate responses",
        "inputParams": [
          {
            "label": "Model",
            "name": "llmModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "llmAgentflow_1-input-llmModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "llmMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "llmAgentflow_1-input-llmMessages-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "llmEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "llmAgentflow_1-input-llmEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "llmMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_1-input-llmMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "llmMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "llmMemoryType": "windowSize"
            },
            "id": "llmAgentflow_1-input-llmMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "llmMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "llmMemoryType": "conversationSummaryBuffer"
            },
            "id": "llmAgentflow_1-input-llmMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "llmUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_1-input-llmUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "llmReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "llmAgentflow_1-input-llmReturnResponseAs-options",
            "display": true
          },
          {
            "label": "JSON Structured Output",
            "name": "llmStructuredOutput",
            "description": "Instruct the LLM to give output in a JSON structured schema",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string"
              },
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "String Array",
                    "name": "stringArray"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Enum",
                    "name": "enum"
                  },
                  {
                    "label": "JSON Array",
                    "name": "jsonArray"
                  }
                ]
              },
              {
                "label": "Enum Values",
                "name": "enumValues",
                "type": "string",
                "placeholder": "value1, value2, value3",
                "description": "Enum values. Separated by comma",
                "optional": true,
                "show": {
                  "llmStructuredOutput[$index].type": "enum"
                }
              },
              {
                "label": "JSON Schema",
                "name": "jsonSchema",
                "type": "code",
                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                "description": "JSON schema for the structured output",
                "optional": true,
                "hideCodeExecute": true,
                "show": {
                  "llmStructuredOutput[$index].type": "jsonArray"
                }
              },
              {
                "label": "Description",
                "name": "description",
                "type": "string",
                "placeholder": "Description of the key"
              }
            ],
            "id": "llmAgentflow_1-input-llmStructuredOutput-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "llmUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "llmAgentflow_1-input-llmUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "llmModel": "azureChatOpenAI",
          "llmMessages": [
            {
              "role": "system",
              "content": "<p>You are a chatbot. Respond to user query: <span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span></p><p>use output of supervisor for framing your answer <span class=\"variable\" data-type=\"mention\" data-id=\"llmAgentflow_0\" data-label=\"llmAgentflow_0\">{{ llmAgentflow_0 }}</span></p><p>Note: You must always ask for database name in the beginning of conversation and whenever required.</p>"
            }
          ],
          "llmEnableMemory": true,
          "llmReturnResponseAs": "userMessage",
          "llmStructuredOutput": "",
          "llmUpdateState": "",
          "llmModelConfig": {
            "cache": "",
            "modelName": "gpt-4.1-mini",
            "temperature": 0.9,
            "maxTokens": "",
            "streaming": true,
            "topP": "",
            "frequencyPenalty": "",
            "presencePenalty": "",
            "timeout": "",
            "basepath": "",
            "baseOptions": "",
            "allowImageUploads": "",
            "imageResolution": "low",
            "llmModel": "azureChatOpenAI"
          },
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "llmAgentflow_1-output-llmAgentflow",
            "label": "LLM",
            "name": "llmAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 177,
      "height": 72,
      "selected": false,
      "positionAbsolute": {
        "x": 527.2688287061134,
        "y": 795.073648768414
      },
      "dragging": false
    },
    {
      "id": "agentAgentflow_4",
      "position": {
        "x": 523.269991756813,
        "y": 45.162725168826455
      },
      "data": {
        "id": "agentAgentflow_4",
        "label": "Data Preparation Agent ",
        "version": 2.2,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_4-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_4-input-agentMessages-array",
            "display": true
          },
          {
            "label": "OpenAI Built-in Tools",
            "name": "agentToolsBuiltInOpenAI",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_preview",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Code Interpreter",
                "name": "code_interpreter",
                "description": "Write and run Python code in a sandboxed environment"
              },
              {
                "label": "Image Generation",
                "name": "image_generation",
                "description": "Generate images based on a text prompt"
              }
            ],
            "show": {
              "agentModel": "chatOpenAI"
            },
            "id": "agentAgentflow_4-input-agentToolsBuiltInOpenAI-multiOptions",
            "display": false
          },
          {
            "label": "Gemini Built-in Tools",
            "name": "agentToolsBuiltInGemini",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "URL Context",
                "name": "urlContext",
                "description": "Extract content from given URLs"
              },
              {
                "label": "Google Search",
                "name": "googleSearch",
                "description": "Search real-time web content"
              }
            ],
            "show": {
              "agentModel": "chatGoogleGenerativeAI"
            },
            "id": "agentAgentflow_4-input-agentToolsBuiltInGemini-multiOptions",
            "display": false
          },
          {
            "label": "Anthropic Built-in Tools",
            "name": "agentToolsBuiltInAnthropic",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_20250305",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Web Fetch",
                "name": "web_fetch_20250910",
                "description": "Retrieve full content from specified web pages"
              }
            ],
            "show": {
              "agentModel": "chatAnthropic"
            },
            "id": "agentAgentflow_4-input-agentToolsBuiltInAnthropic-multiOptions",
            "display": false
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_4-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_4-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_4-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_4-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_4-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_4-input-agentMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_4-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_4-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_4-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_4-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "awsChatBedrock",
          "agentMessages": [
            {
              "role": "system",
              "content": "<blockquote><p><em>You are a Data Preparation Worker Agent responsible for transforming and preparing datasets using the available MCP tools. Your goal is to interpret user queries and apply the appropriate data transformation techniques to make the data suitable for analysis or modeling. </em>Use supervisor instruction <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> to perform task.</p><p>You have access to the following MCP functions:</p><h4><strong>🔄 Column Selection &amp; Transformation</strong></h4><ul><li><p><strong>Antiselect</strong>: Return all columns except those specified.</p></li><li><p><strong>TD_NumApply</strong>: Apply mathematical operations to numeric columns.</p></li><li><p><strong>TD_StrApply</strong>: Apply string operations to text columns.</p></li><li><p><strong>TD_RoundColumns</strong>: Round numeric values to specified decimal places.</p></li><li><p><strong>ConvertTo</strong>: Standardize data types and formats.</p></li><li><p><strong>FillRowID</strong>: Add unique row identifiers.</p></li></ul><h4><strong>📊 Encoding &amp; Binning</strong></h4><ul><li><p><strong>BinCodeFit : </strong>Fit binning model for continuous data.</p></li><li><p><strong>BinCodeTransform</strong>: Apply binning transformation to continuous variables for converting numeric data into categorical bins.</p></li><li><p><strong>OneHotEncodingFit : </strong>Fit one-hot encoding model</p></li><li><p><strong>OneHotEncodingTransform</strong>: Apply one-hot encoding transformation for encoding categorical variables as one-hot vectors.</p></li><li><p><strong>OrdinalEncodingFit : </strong>Fit ordinal encoding model</p></li><li><p><strong>OrdinalEncodingTransform</strong>: Apply ordinal encoding to categorical variables for mapping categorical values to ordinal values.</p></li><li><p><strong>TargetEncodingFit : </strong>Fit target encoding model on categorical data</p></li><li><p><strong>TargetEncodingTransform</strong>: Apply target encoding transformation to categorical variables for encoding categorical values using TargetEncodingFit model .</p></li></ul><h4><strong>🧬 Feature Engineering</strong></h4><ul><li><p><strong>NonLinearCombineFit : </strong>Fit non-linear feature combination model</p></li><li><p><strong>NonLinearCombineTransform</strong>: Apply non-linear feature combination transformations and create new features using non-linear combinations.</p></li><li><p><strong>PolynomialFeaturesFit : </strong>Fit polynomial features model.</p></li><li><p><strong>PolynomialFeaturesTransform</strong>: Apply polynomial feature transformation and generate polynomial feature combinations.</p></li></ul><h4><strong>📉 Dimensionality Reduction &amp; Normalization</strong></h4><ul><li><p><strong>RandomProjectionFit  : </strong>Fit random projection transformation model</p></li><li><p><strong>RandomProjectionTransform</strong>: Apply random projection dimensionality reduction and reduce dimensionality of feature space.</p></li><li><p><strong>RandomProjection MinComponents : </strong>Calculate minimum components for random projection</p></li><li><p><strong>RowNormalizeFit : </strong>Fit row normalization model</p></li><li><p><strong>RowNormalizeTransform</strong>: Apply row-wise normalization to data and normalize data row-wise.</p></li><li><p><strong>ScaleFit : </strong>Fit scaling model for data normalization</p></li><li><p><strong>ScaleTransform</strong>: Apply scaling transformation to numerical data to scale numeric columns.</p></li></ul><h4><strong>🔁 Reshaping Data</strong></h4><ul><li><p><strong>Pivoting: </strong>Transform data from unpivoted(sparse) format to pivoted(dense) format.</p></li><li><p><strong>Unpivoting</strong>: Transform pivoted(dense) data back to unpivoted(sparse) format. </p></li></ul><p>Your responsibilities include:</p><ul><li><p>Understanding the user’s query and selecting the most relevant transformation tools.</p></li><li><p>Applying transformations in the correct sequence to ensure data integrity.</p></li><li><p>Producing clean, well-structured output ready for downstream tasks like modeling or visualization.</p></li><li><p><strong>Note : Always save tool output in table.</strong></p></li></ul></blockquote><blockquote><p>Be precise, efficient, and adaptable in your approach to data preparation, ensuring the dataset is optimized for its intended use.</p></blockquote>"
            }
          ],
          "agentToolsBuiltInOpenAI": "",
          "agentToolsBuiltInGemini": "",
          "agentToolsBuiltInAnthropic": "",
          "agentTools": [
            {
              "agentSelectedTool": "customMCP",
              "agentSelectedToolRequiresHumanInput": false,
              "agentSelectedToolConfig": {
                "mcpServerConfig": "{\n  \"url\": \"http://teradata-mcp-server:8001/mcp\"\n}",
                "mcpActions": "[\"tdml_Antiselect\",\"tdml_BincodeFit\",\"tdml_BincodeTransform\",\"tdml_FillRowId\",\"tdml_NonLinearCombineFit\",\"tdml_NonLinearCombineTransform\",\"tdml_NumApply\",\"tdml_OneHotEncodingFit\",\"tdml_OneHotEncodingTransform\",\"tdml_OrdinalEncodingFit\",\"tdml_OrdinalEncodingTransform\",\"tdml_Pivoting\",\"tdml_PolynomialFeaturesFit\",\"tdml_PolynomialFeaturesTransform\",\"tdml_RandomProjectionFit\",\"tdml_RandomProjectionMinComponents\",\"tdml_RandomProjectionTransform\",\"tdml_RoundColumns\",\"tdml_RowNormalizeFit\",\"tdml_RowNormalizeTransform\",\"tdml_ScaleFit\",\"tdml_ScaleTransform\",\"tdml_StrApply\",\"tdml_TargetEncodingFit\",\"tdml_TargetEncodingTransform\",\"tdml_Unpivoting\",\"base_tableDDL\"]",
                "agentSelectedTool": "customMCP"
              }
            }
          ],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentMemoryWindowSize": "20",
          "agentMemoryMaxTokenLimit": "2000",
          "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> </p>",
          "agentReturnResponseAs": "assistantMessage",
          "agentUpdateState": "",
          "agentModelConfig": {
            "credential": "",
            "region": "us-east-1",
            "model": "anthropic.claude-3-haiku-20240307-v1:0",
            "customModel": "",
            "streaming": true,
            "temperature": 0.7,
            "max_tokens_to_sample": "2000",
            "allowImageUploads": "",
            "latencyOptimized": "",
            "agentModel": "awsChatBedrock"
          }
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_4-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 332,
      "height": 100,
      "selected": false,
      "positionAbsolute": {
        "x": 523.269991756813,
        "y": 45.162725168826455
      },
      "dragging": false
    },
    {
      "id": "agentAgentflow_5",
      "position": {
        "x": 468.60858763619217,
        "y": 161.3459187533254
      },
      "data": {
        "id": "agentAgentflow_5",
        "label": "Model Training Agent",
        "version": 2.2,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_5-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_5-input-agentMessages-array",
            "display": true
          },
          {
            "label": "OpenAI Built-in Tools",
            "name": "agentToolsBuiltInOpenAI",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_preview",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Code Interpreter",
                "name": "code_interpreter",
                "description": "Write and run Python code in a sandboxed environment"
              },
              {
                "label": "Image Generation",
                "name": "image_generation",
                "description": "Generate images based on a text prompt"
              }
            ],
            "show": {
              "agentModel": "chatOpenAI"
            },
            "id": "agentAgentflow_5-input-agentToolsBuiltInOpenAI-multiOptions",
            "display": false
          },
          {
            "label": "Gemini Built-in Tools",
            "name": "agentToolsBuiltInGemini",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "URL Context",
                "name": "urlContext",
                "description": "Extract content from given URLs"
              },
              {
                "label": "Google Search",
                "name": "googleSearch",
                "description": "Search real-time web content"
              }
            ],
            "show": {
              "agentModel": "chatGoogleGenerativeAI"
            },
            "id": "agentAgentflow_5-input-agentToolsBuiltInGemini-multiOptions",
            "display": false
          },
          {
            "label": "Anthropic Built-in Tools",
            "name": "agentToolsBuiltInAnthropic",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_20250305",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Web Fetch",
                "name": "web_fetch_20250910",
                "description": "Retrieve full content from specified web pages"
              }
            ],
            "show": {
              "agentModel": "chatAnthropic"
            },
            "id": "agentAgentflow_5-input-agentToolsBuiltInAnthropic-multiOptions",
            "display": false
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_5-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_5-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_5-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_5-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_5-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_5-input-agentMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_5-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_5-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_5-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_5-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "awsChatBedrock",
          "agentMessages": [
            {
              "role": "system",
              "content": "<blockquote><p><em>You are a Model Training Worker Agent responsible for building machine learning models using the available MCP tools. Your task is to interpret user queries and apply the most appropriate algorithm to train a model on the provided dataset. </em>Use supervisor instruction <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> to perform task.</p><p>You have access to the following model training functions:</p><ul><li><p><strong>DecisionForest</strong>: Train a Decision Forest or Random Forest model for classification or regression.</p></li><li><p><strong>GLM</strong>: Train a Generalized Linear Model for regression or classification tasks.</p></li><li><p><strong>NaiveBayes</strong>: Train a Naive Bayes model for probabilistic classification.</p></li><li><p><strong>SVM</strong>: Train a Support Vector Machine model for classification or regression.</p></li><li><p><strong>XGBoost</strong>: Train a gradient-boosted tree model for high-performance classification or regression.</p></li></ul><ul><li><p><strong>KMeans</strong>: Train a clustering model using the KMeans algorithm. Do not output cluster assignments until explicitly mentioned by user. </p></li></ul><ul><li><p><strong>OneClassSVM</strong>: Train a One-Class SVM model for detecting anomalies or outliers.</p></li></ul><p><strong>Note : Always save output model in an output table.</strong></p><p><strong>Note : Do not modify the output of tool. Just directly return tool output.</strong></p></blockquote>"
            }
          ],
          "agentToolsBuiltInOpenAI": "",
          "agentToolsBuiltInGemini": "",
          "agentToolsBuiltInAnthropic": "",
          "agentTools": [
            {
              "agentSelectedTool": "customMCP",
              "agentSelectedToolRequiresHumanInput": false,
              "agentSelectedToolConfig": {
                "mcpServerConfig": "{\n  \"url\": \"http://teradata-mcp-server:8001/mcp\"\n}",
                "mcpActions": "[\"DecisionForest\",\"tdml_GLM\",\"tdml_KMeans\",\"tdml_KNN\",\"tdml_NaiveBayes\",\"tdml_OneClassSVM\",\"tdml_SVM\",\"tdml_XGBoost\",\"base_tableDDL\"]",
                "agentSelectedTool": "customMCP"
              }
            }
          ],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentMemoryWindowSize": "20",
          "agentMemoryMaxTokenLimit": "2000",
          "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> </p>",
          "agentReturnResponseAs": "assistantMessage",
          "agentUpdateState": "",
          "agentModelConfig": {
            "credential": "",
            "region": "us-east-1",
            "model": "anthropic.claude-3-haiku-20240307-v1:0",
            "customModel": "",
            "streaming": true,
            "temperature": "0.4",
            "max_tokens_to_sample": "2000",
            "allowImageUploads": "",
            "latencyOptimized": "",
            "agentModel": "awsChatBedrock"
          }
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_5-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 332,
      "height": 100,
      "positionAbsolute": {
        "x": 468.60858763619217,
        "y": 161.3459187533254
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "agentAgentflow_6",
      "position": {
        "x": 411.9811010655284,
        "y": 288.94774970472616
      },
      "data": {
        "id": "agentAgentflow_6",
        "label": "Model Inference Agent",
        "version": 2.2,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_6-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_6-input-agentMessages-array",
            "display": true
          },
          {
            "label": "OpenAI Built-in Tools",
            "name": "agentToolsBuiltInOpenAI",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_preview",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Code Interpreter",
                "name": "code_interpreter",
                "description": "Write and run Python code in a sandboxed environment"
              },
              {
                "label": "Image Generation",
                "name": "image_generation",
                "description": "Generate images based on a text prompt"
              }
            ],
            "show": {
              "agentModel": "chatOpenAI"
            },
            "id": "agentAgentflow_6-input-agentToolsBuiltInOpenAI-multiOptions",
            "display": false
          },
          {
            "label": "Gemini Built-in Tools",
            "name": "agentToolsBuiltInGemini",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "URL Context",
                "name": "urlContext",
                "description": "Extract content from given URLs"
              },
              {
                "label": "Google Search",
                "name": "googleSearch",
                "description": "Search real-time web content"
              }
            ],
            "show": {
              "agentModel": "chatGoogleGenerativeAI"
            },
            "id": "agentAgentflow_6-input-agentToolsBuiltInGemini-multiOptions",
            "display": false
          },
          {
            "label": "Anthropic Built-in Tools",
            "name": "agentToolsBuiltInAnthropic",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_20250305",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Web Fetch",
                "name": "web_fetch_20250910",
                "description": "Retrieve full content from specified web pages"
              }
            ],
            "show": {
              "agentModel": "chatAnthropic"
            },
            "id": "agentAgentflow_6-input-agentToolsBuiltInAnthropic-multiOptions",
            "display": false
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_6-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_6-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_6-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_6-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_6-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_6-input-agentMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_6-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_6-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_6-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_6-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "awsChatBedrock",
          "agentMessages": [
            {
              "role": "system",
              "content": "<blockquote><p><em>You are a Model Inference/Prediction Worker Agent responsible for generating predictions using trained machine learning models via MCP tools. Your task is to interpret user queries and apply the appropriate prediction function based on the model type and dataset provided. </em>Use supervisor instruction <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> to perform task.</p><p>You have access to the following MCP prediction functions:</p><ul><li><p><strong>DecisionForestPredict</strong>: Generate predictions using a trained DecisionForest model.</p></li><li><p><strong>GLMPredict</strong>: Generate predictions using a trained GLM model.</p></li><li><p><strong>NaiveBayesPredict</strong>: Generate predictions using a trained NaiveBayes model.</p></li><li><p><strong>SVMPredict</strong>: Generate predictions using a trained SVM model.</p></li><li><p><strong>XGBoostPredict</strong>: Generate predictions using a trained XGBoost model.</p></li></ul><ul><li><p><strong>KMeansPredict</strong>: Assign cluster labels using a trained KMeans model.</p></li><li><p><strong>KNN</strong>: Find K-nearest neighbors for test data based on training data.</p></li></ul><ul><li><p><strong>OneClassSVMPredict</strong>: Detect anomalies using a trained OneClassSVM model.</p></li></ul><p><strong>Note : Always save tool output in an output table.</strong></p><p></p><p></p><p></p></blockquote>"
            }
          ],
          "agentToolsBuiltInOpenAI": "",
          "agentToolsBuiltInGemini": "",
          "agentToolsBuiltInAnthropic": "",
          "agentTools": [
            {
              "agentSelectedTool": "customMCP",
              "agentSelectedToolRequiresHumanInput": false,
              "agentSelectedToolConfig": {
                "mcpServerConfig": "{\n  \"url\": \"http://teradata-mcp-server:8001/mcp\"\n}",
                "mcpActions": "[\"tdml_DecisionForestPredict\",\"tdml_GLMPredict\",\"tdml_KMeansPredict\",\"tdml_OneClassSVMPredict\",\"tdml_SVMPredict\",\"tdml_TDNaiveBayesPredict\",\"tdml_XGBoostPredict\",\"base_tableDDL\"]",
                "agentSelectedTool": "customMCP"
              }
            }
          ],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentMemoryWindowSize": "20",
          "agentMemoryMaxTokenLimit": "2000",
          "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> </p>",
          "agentReturnResponseAs": "assistantMessage",
          "agentUpdateState": "",
          "agentModelConfig": {
            "credential": "",
            "region": "us-east-1",
            "model": "anthropic.claude-3-haiku-20240307-v1:0",
            "customModel": "",
            "streaming": true,
            "temperature": 0.7,
            "max_tokens_to_sample": "2000",
            "allowImageUploads": "",
            "latencyOptimized": "",
            "agentModel": "awsChatBedrock"
          }
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_6-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 332,
      "height": 100,
      "positionAbsolute": {
        "x": 411.9811010655284,
        "y": 288.94774970472616
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "agentAgentflow_7",
      "position": {
        "x": 409.9811010655284,
        "y": 411.0097938417615
      },
      "data": {
        "id": "agentAgentflow_7",
        "label": "Model Evaluation Agent",
        "version": 2.2,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_7-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_7-input-agentMessages-array",
            "display": true
          },
          {
            "label": "OpenAI Built-in Tools",
            "name": "agentToolsBuiltInOpenAI",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_preview",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Code Interpreter",
                "name": "code_interpreter",
                "description": "Write and run Python code in a sandboxed environment"
              },
              {
                "label": "Image Generation",
                "name": "image_generation",
                "description": "Generate images based on a text prompt"
              }
            ],
            "show": {
              "agentModel": "chatOpenAI"
            },
            "id": "agentAgentflow_7-input-agentToolsBuiltInOpenAI-multiOptions",
            "display": false
          },
          {
            "label": "Gemini Built-in Tools",
            "name": "agentToolsBuiltInGemini",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "URL Context",
                "name": "urlContext",
                "description": "Extract content from given URLs"
              },
              {
                "label": "Google Search",
                "name": "googleSearch",
                "description": "Search real-time web content"
              }
            ],
            "show": {
              "agentModel": "chatGoogleGenerativeAI"
            },
            "id": "agentAgentflow_7-input-agentToolsBuiltInGemini-multiOptions",
            "display": false
          },
          {
            "label": "Anthropic Built-in Tools",
            "name": "agentToolsBuiltInAnthropic",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_20250305",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Web Fetch",
                "name": "web_fetch_20250910",
                "description": "Retrieve full content from specified web pages"
              }
            ],
            "show": {
              "agentModel": "chatAnthropic"
            },
            "id": "agentAgentflow_7-input-agentToolsBuiltInAnthropic-multiOptions",
            "display": false
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_7-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_7-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_7-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_7-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_7-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_7-input-agentMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_7-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_7-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_7-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_7-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "awsChatBedrock",
          "agentMessages": [
            {
              "role": "system",
              "content": "<blockquote><p><em>You are a Model Evaluation/Explainability Worker Agent responsible for evaluating machine learning models and explaining their behavior using the available MCP tools. Your task is to interpret user queries and apply the appropriate evaluation or explainability techniques to assess model performance and interpret predictions. </em>Use supervisor instruction <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> to perform task.</p><p>You have access to the following MCP functions:</p><h4><strong>✅ Model Evaluation</strong></h4><ul><li><p><strong>ClassificationEvaluator</strong>: Evaluate classification models using metrics such as accuracy, precision, recall, and F1 score.</p></li><li><p><strong>RegressionEvaluator</strong>: Evaluate regression models using metrics like RMSE, MAE, and R² score.</p></li><li><p><strong>TrainTestSplit</strong>: Split datasets into training and test sets to assess model generalization.</p></li><li><p><strong>ROC Curve &amp; AUC</strong>: Visualize classifier performance across thresholds and compute Area Under Curve.</p></li><li><p><strong>Silhouette</strong>: Assess clustering quality by measuring intra-cluster similarity and inter-cluster separation.</p></li></ul><h4><strong>🔍 Model Explainability</strong></h4><ul><li><p><strong>SHAP</strong>: Explain individual predictions by quantifying feature contributions.</p></li></ul><p>Your responsibilities include:</p><ul><li><p>Selecting the appropriate evaluation or explainability method based on the model type and user query.</p></li><li><p>Applying the tools to generate meaningful metrics, visualizations, or interpretations.</p></li><li><p>Presenting results in a clear, structured format that supports decision-making or model refinement.</p></li></ul></blockquote><blockquote><p>Be thorough, insightful, and user-focused in your evaluation process, ensuring that model performance and behavior are well-understood and actionable.</p></blockquote>"
            }
          ],
          "agentToolsBuiltInOpenAI": "",
          "agentToolsBuiltInGemini": "",
          "agentToolsBuiltInAnthropic": "",
          "agentTools": [
            {
              "agentSelectedTool": "customMCP",
              "agentSelectedToolRequiresHumanInput": false,
              "agentSelectedToolConfig": {
                "mcpServerConfig": "{\n  \"url\": \"http://teradata-mcp-server:8001/mcp\"\n}",
                "mcpActions": "[\"tdml_ClassificationEvaluator\",\"tdml_RegressionEvaluator\",\"tdml_ROC\",\"tdml_Shap\",\"tdml_Silhouette\",\"base_tableDDL\"]",
                "agentSelectedTool": "customMCP"
              }
            }
          ],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentMemoryWindowSize": "20",
          "agentMemoryMaxTokenLimit": "2000",
          "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> </p>",
          "agentReturnResponseAs": "assistantMessage",
          "agentUpdateState": "",
          "agentModelConfig": {
            "credential": "",
            "region": "us-east-1",
            "model": "anthropic.claude-3-haiku-20240307-v1:0",
            "customModel": "",
            "streaming": true,
            "temperature": 0.7,
            "max_tokens_to_sample": "2000",
            "allowImageUploads": "",
            "latencyOptimized": "",
            "agentModel": "awsChatBedrock"
          }
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_7-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 332,
      "height": 100,
      "positionAbsolute": {
        "x": 409.9811010655284,
        "y": 411.0097938417615
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "agentAgentflow_8",
      "position": {
        "x": 440.90939838370366,
        "y": 527.2356684315139
      },
      "data": {
        "id": "agentAgentflow_8",
        "label": "Text Analytics Agent",
        "version": 2.2,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_8-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_8-input-agentMessages-array",
            "display": true
          },
          {
            "label": "OpenAI Built-in Tools",
            "name": "agentToolsBuiltInOpenAI",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_preview",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Code Interpreter",
                "name": "code_interpreter",
                "description": "Write and run Python code in a sandboxed environment"
              },
              {
                "label": "Image Generation",
                "name": "image_generation",
                "description": "Generate images based on a text prompt"
              }
            ],
            "show": {
              "agentModel": "chatOpenAI"
            },
            "id": "agentAgentflow_8-input-agentToolsBuiltInOpenAI-multiOptions",
            "display": false
          },
          {
            "label": "Gemini Built-in Tools",
            "name": "agentToolsBuiltInGemini",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "URL Context",
                "name": "urlContext",
                "description": "Extract content from given URLs"
              },
              {
                "label": "Google Search",
                "name": "googleSearch",
                "description": "Search real-time web content"
              }
            ],
            "show": {
              "agentModel": "chatGoogleGenerativeAI"
            },
            "id": "agentAgentflow_8-input-agentToolsBuiltInGemini-multiOptions",
            "display": false
          },
          {
            "label": "Anthropic Built-in Tools",
            "name": "agentToolsBuiltInAnthropic",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_20250305",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Web Fetch",
                "name": "web_fetch_20250910",
                "description": "Retrieve full content from specified web pages"
              }
            ],
            "show": {
              "agentModel": "chatAnthropic"
            },
            "id": "agentAgentflow_8-input-agentToolsBuiltInAnthropic-multiOptions",
            "display": false
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_8-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_8-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_8-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_8-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_8-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_8-input-agentMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_8-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_8-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_8-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_8-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "awsChatBedrock",
          "agentMessages": [
            {
              "role": "system",
              "content": "<blockquote><p><em>You are a Text Analytics Worker Agent responsible for analyzing and interpreting text data using the available MCP tools. Your task is to understand user queries and apply the appropriate text analytics functions to extract insights, classify content, and explain linguistic patterns. </em>Use supervisor instruction <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> to perform task.</p><p>You have access to the following MCP tools:</p><h4><strong>🔍 Text Parsing &amp; Tokenization</strong></h4><ul><li><p><strong>TextParser</strong>: Parse and tokenize text into meaningful components.</p></li><li><p><strong>TextMorph</strong>: Generate dictionary forms of tokens using lemmatization.</p></li></ul><h4><strong>📊 Text Representation &amp; Similarity</strong></h4><ul><li><p><strong>TFIDF</strong>: Compute term frequency-inverse document frequency scores.</p></li><li><p><strong>WordEmbeddings</strong>: Generate vector representations and compute text similarity.</p></li></ul><h4><strong>🧠 Text Classification &amp; Sentiment</strong></h4><ul><li><p><strong>NaiveBayesTextClassifierTrainer</strong>: Train a Naive Bayes model on labeled text data.</p></li><li><p><strong>NaiveBayesTextClassifierPredict</strong>: Predict text categories using a trained model.</p></li><li><p><strong>SentimentExtractor</strong>: Determine sentiment polarity (positive, negative, neutral).</p></li></ul><h4><strong>🧩 Text Structure &amp; Patterns</strong></h4><ul><li><p><strong>Ngramsplitter</strong>: Extract and count unique n-grams from documents.</p></li><li><p><strong>NERExtractor</strong>: Identify named entities using user-defined patterns.</p></li></ul><p>Your responsibilities include:</p><ul><li><p>Selecting the appropriate tool(s) based on the nature of the user query.</p></li><li><p>Presenting results in a clear, structured format suitable for interpretation or downstream tasks.</p></li></ul></blockquote><blockquote><p>Be analytical, precise, and context-aware in your approach to text analytics, ensuring that your outputs are insightful and actionable.</p></blockquote>"
            }
          ],
          "agentToolsBuiltInOpenAI": "",
          "agentToolsBuiltInGemini": "",
          "agentToolsBuiltInAnthropic": "",
          "agentTools": [
            {
              "agentSelectedTool": "customMCP",
              "agentSelectedToolRequiresHumanInput": false,
              "agentSelectedToolConfig": {
                "mcpServerConfig": "{\n  \"url\": \"http://teradata-mcp-server:8001/mcp\"\n}",
                "mcpActions": "[\"tdml_NaiveBayesTextClassifierPredict\",\"tdml_NaiveBayesTextClassifierTrainer\",\"tdml_NERExtractor\",\"tdml_NGramSplitter\",\"tdml_SentimentExtractor\",\"tdml_TextMorph\",\"tdml_TextParser\",\"tdml_TFIDF\",\"tdml_WordEmbeddings\",\"base_tableDDL\"]",
                "agentSelectedTool": "customMCP"
              }
            }
          ],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentMemoryWindowSize": "20",
          "agentMemoryMaxTokenLimit": "2000",
          "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> </p>",
          "agentReturnResponseAs": "assistantMessage",
          "agentUpdateState": "",
          "agentModelConfig": {
            "credential": "",
            "region": "us-east-1",
            "model": "anthropic.claude-3-haiku-20240307-v1:0",
            "customModel": "",
            "streaming": true,
            "temperature": 0.7,
            "max_tokens_to_sample": "4000",
            "allowImageUploads": "",
            "latencyOptimized": "",
            "agentModel": "awsChatBedrock"
          }
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_8-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 332,
      "height": 100,
      "positionAbsolute": {
        "x": 440.90939838370366,
        "y": 527.2356684315139
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "agentAgentflow_9",
      "position": {
        "x": 485.2263687619494,
        "y": 651.6709552297655
      },
      "data": {
        "id": "agentAgentflow_9",
        "label": "Association Analysis Agent",
        "version": 2.2,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_9-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_9-input-agentMessages-array",
            "display": true
          },
          {
            "label": "OpenAI Built-in Tools",
            "name": "agentToolsBuiltInOpenAI",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_preview",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Code Interpreter",
                "name": "code_interpreter",
                "description": "Write and run Python code in a sandboxed environment"
              },
              {
                "label": "Image Generation",
                "name": "image_generation",
                "description": "Generate images based on a text prompt"
              }
            ],
            "show": {
              "agentModel": "chatOpenAI"
            },
            "id": "agentAgentflow_9-input-agentToolsBuiltInOpenAI-multiOptions",
            "display": false
          },
          {
            "label": "Gemini Built-in Tools",
            "name": "agentToolsBuiltInGemini",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "URL Context",
                "name": "urlContext",
                "description": "Extract content from given URLs"
              },
              {
                "label": "Google Search",
                "name": "googleSearch",
                "description": "Search real-time web content"
              }
            ],
            "show": {
              "agentModel": "chatGoogleGenerativeAI"
            },
            "id": "agentAgentflow_9-input-agentToolsBuiltInGemini-multiOptions",
            "display": false
          },
          {
            "label": "Anthropic Built-in Tools",
            "name": "agentToolsBuiltInAnthropic",
            "type": "multiOptions",
            "optional": true,
            "options": [
              {
                "label": "Web Search",
                "name": "web_search_20250305",
                "description": "Search the web for the latest information"
              },
              {
                "label": "Web Fetch",
                "name": "web_fetch_20250910",
                "description": "Retrieve full content from specified web pages"
              }
            ],
            "show": {
              "agentModel": "chatAnthropic"
            },
            "id": "agentAgentflow_9-input-agentToolsBuiltInAnthropic-multiOptions",
            "display": false
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_9-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_9-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_9-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_9-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_9-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_9-input-agentMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_9-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_9-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_9-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_9-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "awsChatBedrock",
          "agentMessages": [
            {
              "role": "system",
              "content": "<blockquote><p><em>You are an Association Analysis Worker Agent responsible for discovering item relationships and co-occurrence patterns in sales transaction data using the available MCP tools. Your task is to interpret user queries and apply the appropriate association analysis techniques to generate actionable insights. </em>Use supervisor instruction <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> to perform task.</p><p>You have access to the following MCP tools:</p><h4><strong>🔗 Association Rule Mining</strong></h4><ul><li><p><strong>Apriori</strong>: Identify frequent itemsets and generate association rules. Calculates statistical measures such as support, confidence, and lift to understand how likely one set of items influences another.</p></li></ul><h4><strong>🧮 Pairwise Item Analysis</strong></h4><ul><li><p><strong>CFilter</strong>: Compute statistical measures for item pairs to evaluate how likely they are to be purchased together. Useful for identifying strong item-to-item associations.</p></li></ul><p>Your responsibilities include:</p><ul><li><p>Understanding the user’s analytical goal (e.g., identifying frequently bought-together items, uncovering cross-sell opportunities).</p></li><li><p>Selecting and applying the appropriate tool based on the query and dataset structure.</p></li><li><p>Presenting results in a clear, structured format, including key metrics like support, confidence, lift, and item combinations.</p></li><li><p>Handling edge cases such as sparse transactions, rare itemsets, or noisy data.</p></li></ul></blockquote><blockquote><p>Be analytical, precise, and business-aware in your approach to association analysis, ensuring that your insights support strategic decisions like product bundling, recommendation systems, or inventory planning.</p></blockquote>"
            }
          ],
          "agentToolsBuiltInOpenAI": "",
          "agentToolsBuiltInGemini": "",
          "agentToolsBuiltInAnthropic": "",
          "agentTools": [
            {
              "agentSelectedTool": "customMCP",
              "agentSelectedToolRequiresHumanInput": false,
              "agentSelectedToolConfig": {
                "mcpServerConfig": "{\n  \"url\": \"http://teradata-mcp-server:8001/mcp\"\n}",
                "mcpActions": "[\"tdml_Apriori\",\"tdml_CFilter\",\"tdml_base_tableDDL\"]",
                "agentSelectedTool": "customMCP"
              }
            }
          ],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentMemoryWindowSize": "20",
          "agentMemoryMaxTokenLimit": "2000",
          "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.instruction\" data-label=\"$flow.state.instruction\">{{ $flow.state.instruction }}</span> </p>",
          "agentReturnResponseAs": "assistantMessage",
          "agentUpdateState": "",
          "agentModelConfig": {
            "credential": "",
            "region": "us-east-1",
            "model": "anthropic.claude-3-haiku-20240307-v1:0",
            "customModel": "",
            "streaming": true,
            "temperature": 0.7,
            "max_tokens_to_sample": "4000",
            "allowImageUploads": "",
            "latencyOptimized": "",
            "agentModel": "awsChatBedrock"
          },
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_9-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 332,
      "height": 100,
      "positionAbsolute": {
        "x": 485.2263687619494,
        "y": 651.6709552297655
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "loopAgentflow_8",
      "position": {
        "x": 1652.1864675516174,
        "y": 290.69580668429035
      },
      "data": {
        "id": "loopAgentflow_8",
        "label": "Loop to Supervisor",
        "version": 1.1,
        "name": "loopAgentflow",
        "type": "Loop",
        "color": "#FFA07A",
        "hideOutput": true,
        "baseClasses": [
          "Loop"
        ],
        "category": "Agent Flows",
        "description": "Loop back to a previous node",
        "inputParams": [
          {
            "label": "Loop Back To",
            "name": "loopBackToNode",
            "type": "asyncOptions",
            "loadMethod": "listPreviousNodes",
            "freeSolo": true,
            "id": "loopAgentflow_8-input-loopBackToNode-asyncOptions",
            "display": true
          },
          {
            "label": "Max Loop Count",
            "name": "maxLoopCount",
            "type": "number",
            "default": 5,
            "id": "loopAgentflow_8-input-maxLoopCount-number",
            "display": true
          },
          {
            "label": "Fallback Message",
            "name": "fallbackMessage",
            "type": "string",
            "description": "Message to display if the loop count is exceeded",
            "placeholder": "Enter your fallback message here",
            "rows": 4,
            "acceptVariable": true,
            "optional": true,
            "id": "loopAgentflow_8-input-fallbackMessage-string",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "loopUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "loopAgentflow_8-input-loopUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "loopBackToNode": "llmAgentflow_0-Supervisor",
          "maxLoopCount": "5",
          "fallbackMessage": "",
          "loopUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 195,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1652.1864675516174,
        "y": 290.69580668429035
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_0",
      "position": {
        "x": 1175,
        "y": -275
      },
      "data": {
        "id": "customFunctionAgentflow_0",
        "label": "f1",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_0-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_0-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_0-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "var1",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"agentAgentflow_0\" data-label=\"agentAgentflow_0\">{{ agentAgentflow_0 }}</span></p>"
            }
          ],
          "customFunctionJavascriptFunction": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\n\ntry {\n     $flow.state.answers = \"\\n\" + $flow.state.answers + \"\\n\" + $var1 ;\n    return $var1;\n} catch (error) {\n    console.error(error);\n    return 'Inferencing Failed due to unknown exception';\n}",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_0-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 83,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1175,
        "y": -275
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_1",
      "position": {
        "x": 1169.1045749621364,
        "y": -164.29471342848467
      },
      "data": {
        "id": "customFunctionAgentflow_1",
        "label": "f2",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_1-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_1-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_1-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "var1",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"agentAgentflow_1\" data-label=\"agentAgentflow_1\">{{ agentAgentflow_1 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\n\ntry {\n\n     $flow.state.answers = \"\\n\" + $flow.state.answers + \"\\n\" + $var1 ;\n    \n    \n    return $var1;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_1-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 86,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1169.1045749621364,
        "y": -164.29471342848467
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_2",
      "position": {
        "x": 1168.662907206442,
        "y": -51.686263858425704
      },
      "data": {
        "id": "customFunctionAgentflow_2",
        "label": "f3",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_2-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_2-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_2-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "var1",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"agentAgentflow_2\" data-label=\"agentAgentflow_2\">{{ agentAgentflow_2 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\n\ntry {\n\n     $flow.state.answers = \"\\n\" + $flow.state.answers + \"\\n\" + $var1 ;\n    \n    \n    return $var1;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_2-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 86,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1168.662907206442,
        "y": -51.686263858425704
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_3",
      "position": {
        "x": 1174.0290731289342,
        "y": 59.53925697357232
      },
      "data": {
        "id": "customFunctionAgentflow_3",
        "label": "f4",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_3-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_3-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_3-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "var1",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"agentAgentflow_4\" data-label=\"agentAgentflow_4\">{{ agentAgentflow_4 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\n\ntry {\n\n     $flow.state.answers = \"\\n\" + $flow.state.answers + \"\\n\" + $var1 ;\n    \n    \n    return $var1;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_3-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 85,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1174.0290731289342,
        "y": 59.53925697357232
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_4",
      "position": {
        "x": 1176.204833144868,
        "y": 175.43899879084063
      },
      "data": {
        "id": "customFunctionAgentflow_4",
        "label": "f5",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_4-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_4-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_4-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "var1",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"agentAgentflow_5\" data-label=\"agentAgentflow_5\">{{ agentAgentflow_5 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\n\ntry {\n\n     $flow.state.answers = \"\\n\" + $flow.state.answers + \"\\n\" + $var1 ;\n    \n    \n    return $var1;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_4-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 85,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1176.204833144868,
        "y": 175.43899879084063
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_5",
      "position": {
        "x": 1171.426409963465,
        "y": 307.6178570593204
      },
      "data": {
        "id": "customFunctionAgentflow_5",
        "label": "f6",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_5-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_5-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_5-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "var1",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"agentAgentflow_6\" data-label=\"agentAgentflow_6\">{{ agentAgentflow_6 }}</span></p>"
            }
          ],
          "customFunctionJavascriptFunction": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\ntry {\n     $flow.state.answers = \"\\n\" + $flow.state.answers + \"\\n\" + $var1 ;\n    return $var1;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_5-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 86,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1171.426409963465,
        "y": 307.6178570593204
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_6",
      "position": {
        "x": 1175.0905427754058,
        "y": 424.92570682056066
      },
      "data": {
        "id": "customFunctionAgentflow_6",
        "label": "f7",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_6-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_6-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_6-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "var1",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"agentAgentflow_7\" data-label=\"agentAgentflow_7\">{{ agentAgentflow_7 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\n\ntry {\n\n     $flow.state.answers = \"\\n\" + $flow.state.answers + \"\\n\" + $var1 ;\n    \n    \n    return $var1;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_6-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 85,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1175.0905427754058,
        "y": 424.92570682056066
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_7",
      "position": {
        "x": 1175.4181579896494,
        "y": 543.070235375213
      },
      "data": {
        "id": "customFunctionAgentflow_7",
        "label": "f8",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_7-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_7-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_7-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "var1",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"agentAgentflow_8\" data-label=\"agentAgentflow_8\">{{ agentAgentflow_8 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\n\ntry {\n\n     $flow.state.answers = \"\\n\" + $flow.state.answers + \"\\n\" + $var1 ;\n    \n    \n    return $var1;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_7-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 86,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1175.4181579896494,
        "y": 543.070235375213
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_9",
      "position": {
        "x": 1176.2364682800883,
        "y": 667.0335327583529
      },
      "data": {
        "id": "customFunctionAgentflow_9",
        "label": "f9",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_9-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_9-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_9-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "var1",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"agentAgentflow_9\" data-label=\"agentAgentflow_9\">{{ agentAgentflow_9 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\n\ntry {\n\n     $flow.state.answers = \"\\n\" + $flow.state.answers + \"\\n\" + $var1 ;\n    \n    \n    return $var1;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_9-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 86,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1176.2364682800883,
        "y": 667.0335327583529
      },
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "startAgentflow_0",
      "sourceHandle": "startAgentflow_0-output-startAgentflow",
      "target": "llmAgentflow_0",
      "targetHandle": "llmAgentflow_0",
      "data": {
        "sourceColor": "#7EE787",
        "targetColor": "#64B5F6",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "startAgentflow_0-startAgentflow_0-output-startAgentflow-llmAgentflow_0-llmAgentflow_0"
    },
    {
      "source": "llmAgentflow_0",
      "sourceHandle": "llmAgentflow_0-output-llmAgentflow",
      "target": "conditionAgentflow_0",
      "targetHandle": "conditionAgentflow_0",
      "data": {
        "sourceColor": "#64B5F6",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "llmAgentflow_0-llmAgentflow_0-output-llmAgentflow-conditionAgentflow_0-conditionAgentflow_0"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-7",
      "target": "agentAgentflow_8",
      "targetHandle": "agentAgentflow_8",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "7",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-7-agentAgentflow_8-agentAgentflow_8"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-9",
      "target": "agentAgentflow_9",
      "targetHandle": "agentAgentflow_9",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "9",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-9-agentAgentflow_9-agentAgentflow_9"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-0",
      "target": "agentAgentflow_0",
      "targetHandle": "agentAgentflow_0",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-0-agentAgentflow_0-agentAgentflow_0"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-1",
      "target": "agentAgentflow_1",
      "targetHandle": "agentAgentflow_1",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-1-agentAgentflow_1-agentAgentflow_1"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-2",
      "target": "agentAgentflow_2",
      "targetHandle": "agentAgentflow_2",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "2",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-2-agentAgentflow_2-agentAgentflow_2"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-3",
      "target": "agentAgentflow_4",
      "targetHandle": "agentAgentflow_4",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "3",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-3-agentAgentflow_4-agentAgentflow_4",
      "selected": false
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-4",
      "target": "agentAgentflow_5",
      "targetHandle": "agentAgentflow_5",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "4",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-4-agentAgentflow_5-agentAgentflow_5"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-5",
      "target": "agentAgentflow_6",
      "targetHandle": "agentAgentflow_6",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "5",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-5-agentAgentflow_6-agentAgentflow_6"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-6",
      "target": "agentAgentflow_7",
      "targetHandle": "agentAgentflow_7",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "6",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-6-agentAgentflow_7-agentAgentflow_7"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-10",
      "target": "llmAgentflow_1",
      "targetHandle": "llmAgentflow_1",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#64B5F6",
        "edgeLabel": "10",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-10-llmAgentflow_1-llmAgentflow_1"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-11",
      "target": "agentAgentflow_3",
      "targetHandle": "agentAgentflow_3",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "11",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-11-agentAgentflow_3-agentAgentflow_3"
    },
    {
      "source": "agentAgentflow_0",
      "sourceHandle": "agentAgentflow_0-output-agentAgentflow",
      "target": "customFunctionAgentflow_0",
      "targetHandle": "customFunctionAgentflow_0",
      "data": {
        "sourceColor": "#4DD0E1",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "agentAgentflow_0-agentAgentflow_0-output-agentAgentflow-customFunctionAgentflow_0-customFunctionAgentflow_0"
    },
    {
      "source": "customFunctionAgentflow_0",
      "sourceHandle": "customFunctionAgentflow_0-output-customFunctionAgentflow",
      "target": "loopAgentflow_8",
      "targetHandle": "loopAgentflow_8",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFA07A",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_0-customFunctionAgentflow_0-output-customFunctionAgentflow-loopAgentflow_8-loopAgentflow_8"
    },
    {
      "source": "agentAgentflow_1",
      "sourceHandle": "agentAgentflow_1-output-agentAgentflow",
      "target": "customFunctionAgentflow_1",
      "targetHandle": "customFunctionAgentflow_1",
      "data": {
        "sourceColor": "#4DD0E1",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "agentAgentflow_1-agentAgentflow_1-output-agentAgentflow-customFunctionAgentflow_1-customFunctionAgentflow_1"
    },
    {
      "source": "agentAgentflow_2",
      "sourceHandle": "agentAgentflow_2-output-agentAgentflow",
      "target": "customFunctionAgentflow_2",
      "targetHandle": "customFunctionAgentflow_2",
      "data": {
        "sourceColor": "#4DD0E1",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "agentAgentflow_2-agentAgentflow_2-output-agentAgentflow-customFunctionAgentflow_2-customFunctionAgentflow_2"
    },
    {
      "source": "agentAgentflow_4",
      "sourceHandle": "agentAgentflow_4-output-agentAgentflow",
      "target": "customFunctionAgentflow_3",
      "targetHandle": "customFunctionAgentflow_3",
      "data": {
        "sourceColor": "#4DD0E1",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "agentAgentflow_4-agentAgentflow_4-output-agentAgentflow-customFunctionAgentflow_3-customFunctionAgentflow_3"
    },
    {
      "source": "agentAgentflow_5",
      "sourceHandle": "agentAgentflow_5-output-agentAgentflow",
      "target": "customFunctionAgentflow_4",
      "targetHandle": "customFunctionAgentflow_4",
      "data": {
        "sourceColor": "#4DD0E1",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "agentAgentflow_5-agentAgentflow_5-output-agentAgentflow-customFunctionAgentflow_4-customFunctionAgentflow_4"
    },
    {
      "source": "agentAgentflow_6",
      "sourceHandle": "agentAgentflow_6-output-agentAgentflow",
      "target": "customFunctionAgentflow_5",
      "targetHandle": "customFunctionAgentflow_5",
      "data": {
        "sourceColor": "#4DD0E1",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "agentAgentflow_6-agentAgentflow_6-output-agentAgentflow-customFunctionAgentflow_5-customFunctionAgentflow_5"
    },
    {
      "source": "agentAgentflow_7",
      "sourceHandle": "agentAgentflow_7-output-agentAgentflow",
      "target": "customFunctionAgentflow_6",
      "targetHandle": "customFunctionAgentflow_6",
      "data": {
        "sourceColor": "#4DD0E1",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "agentAgentflow_7-agentAgentflow_7-output-agentAgentflow-customFunctionAgentflow_6-customFunctionAgentflow_6"
    },
    {
      "source": "agentAgentflow_8",
      "sourceHandle": "agentAgentflow_8-output-agentAgentflow",
      "target": "customFunctionAgentflow_7",
      "targetHandle": "customFunctionAgentflow_7",
      "data": {
        "sourceColor": "#4DD0E1",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "agentAgentflow_8-agentAgentflow_8-output-agentAgentflow-customFunctionAgentflow_7-customFunctionAgentflow_7"
    },
    {
      "source": "agentAgentflow_9",
      "sourceHandle": "agentAgentflow_9-output-agentAgentflow",
      "target": "customFunctionAgentflow_9",
      "targetHandle": "customFunctionAgentflow_9",
      "data": {
        "sourceColor": "#4DD0E1",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "agentAgentflow_9-agentAgentflow_9-output-agentAgentflow-customFunctionAgentflow_9-customFunctionAgentflow_9"
    },
    {
      "source": "customFunctionAgentflow_3",
      "sourceHandle": "customFunctionAgentflow_3-output-customFunctionAgentflow",
      "target": "loopAgentflow_8",
      "targetHandle": "loopAgentflow_8",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFA07A",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_3-customFunctionAgentflow_3-output-customFunctionAgentflow-loopAgentflow_8-loopAgentflow_8"
    },
    {
      "source": "customFunctionAgentflow_4",
      "sourceHandle": "customFunctionAgentflow_4-output-customFunctionAgentflow",
      "target": "loopAgentflow_8",
      "targetHandle": "loopAgentflow_8",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFA07A",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_4-customFunctionAgentflow_4-output-customFunctionAgentflow-loopAgentflow_8-loopAgentflow_8"
    },
    {
      "source": "customFunctionAgentflow_5",
      "sourceHandle": "customFunctionAgentflow_5-output-customFunctionAgentflow",
      "target": "loopAgentflow_8",
      "targetHandle": "loopAgentflow_8",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFA07A",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_5-customFunctionAgentflow_5-output-customFunctionAgentflow-loopAgentflow_8-loopAgentflow_8"
    },
    {
      "source": "customFunctionAgentflow_6",
      "sourceHandle": "customFunctionAgentflow_6-output-customFunctionAgentflow",
      "target": "loopAgentflow_8",
      "targetHandle": "loopAgentflow_8",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFA07A",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_6-customFunctionAgentflow_6-output-customFunctionAgentflow-loopAgentflow_8-loopAgentflow_8"
    },
    {
      "source": "customFunctionAgentflow_7",
      "sourceHandle": "customFunctionAgentflow_7-output-customFunctionAgentflow",
      "target": "loopAgentflow_8",
      "targetHandle": "loopAgentflow_8",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFA07A",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_7-customFunctionAgentflow_7-output-customFunctionAgentflow-loopAgentflow_8-loopAgentflow_8"
    },
    {
      "source": "customFunctionAgentflow_9",
      "sourceHandle": "customFunctionAgentflow_9-output-customFunctionAgentflow",
      "target": "loopAgentflow_8",
      "targetHandle": "loopAgentflow_8",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFA07A",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_9-customFunctionAgentflow_9-output-customFunctionAgentflow-loopAgentflow_8-loopAgentflow_8",
      "selected": false
    },
    {
      "source": "customFunctionAgentflow_2",
      "sourceHandle": "customFunctionAgentflow_2-output-customFunctionAgentflow",
      "target": "loopAgentflow_8",
      "targetHandle": "loopAgentflow_8",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFA07A",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_2-customFunctionAgentflow_2-output-customFunctionAgentflow-loopAgentflow_8-loopAgentflow_8"
    },
    {
      "source": "customFunctionAgentflow_1",
      "sourceHandle": "customFunctionAgentflow_1-output-customFunctionAgentflow",
      "target": "loopAgentflow_8",
      "targetHandle": "loopAgentflow_8",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFA07A",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_1-customFunctionAgentflow_1-output-customFunctionAgentflow-loopAgentflow_8-loopAgentflow_8"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-10",
      "target": "agentAgentflow_3",
      "targetHandle": "agentAgentflow_3",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DD0E1",
        "edgeLabel": "10",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-10-agentAgentflow_3-agentAgentflow_3"
    }
  ]
}