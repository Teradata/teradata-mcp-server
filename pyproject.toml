[project]
name = "teradata-mcp-server"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
"pip>=25.0.1",
"pydantic>=2.11.3",
"pydantic-ai>=0.1.3",
"requests>=2.32.3",
"tabulate",
"mcp[cli]==1.9.3",
"mcp-cli>=0.1.0",
"tdfs4ds==0.2.4.16",
"teradataml>=20.0.0.5",
"teradatasqlalchemy>=20.0.0.0",
"teradatagenai>=20.0.0.0",
]

[project.optional-dependencies]
test = [
"anthropic>=0.49.0",
"boto3>=1.37.37",
"langchain-core>=0.3.54",
"langchain-mcp-adapters>=0.0.9",
"langchain-openai>=0.3.14",
"langgraph>=0.3.31",
"openai>=1.75.0",
"litellm>=1.68.2",
"nest-asyncio>=1.6.0",
"google-adk>=1.3.0",
"jinja2>=3.1.0",
]

[project.scripts]
teradata-mcp-server = "teradata_mcp_server:main"
teradata-test = "teradata_mcp_server.testing.cli:main"

[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[tool.uv]
package = true

[tool.ruff]
line-length = 120
target-version = "py313"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "N", "B", "UP"]
ignore = [
    "F403",  # Wildcard imports (temporarily ignore for gradual refactoring)
    "F401",  # Unused imports in __init__.py files (common pattern for re-exports)
    "E402",  # Module level import not at top (some tools have conditional imports)
    "E501",  # Line too long (let formatter handle this)
    "N816",  # Variable naming (existing legacy naming)
    "N802",  # Function naming (preserve existing naming conventions)
    "N803",  # Argument naming (preserve existing naming conventions)
    "B905",  # zip() without explicit strict parameter (backwards compatibility)
    "B008",  # Function call in default argument (existing pattern)
    "F841",  # Unused variable (may be intentional in some cases)
]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F403", "F401"]  # Allow wildcard imports and unused imports in __init__.py
